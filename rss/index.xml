<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Ramblings of a Dude]]></title><description><![CDATA[Ramblings of a programmer, gamer, modder, maker and computer scientist]]></description><link>https://TRex22.github.io/blog</link><image><url>/images/thearrangement.png</url><title>Ramblings of a Dude</title><link>https://TRex22.github.io/blog</link></image><generator>RSS for Node</generator><lastBuildDate>Sat, 22 Sep 2018 21:03:33 GMT</lastBuildDate><atom:link href="https://TRex22.github.io/blog/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[HTTParty, JSON requests and the right Content-Type]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>This post is about an issue I discovered whilst trying to debug an issue with a JSON request to a third party service. This request contained a JSON body where one of the fields was an array of strings but when querying the service to see what was sent - showed that the array was blank. The client used for this request makes use of HTTParty.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://TRex22.github.io/blog/images/solusalt.jpg" alt="solusalt">
</div>
</div>
<div class="paragraph">
<p>Initially I wanted to figure out what my client was sending through to the service. I attempted to use <code>binding.pry</code> and step through the client to see if something was not functioning correctly.</p>
</div>
<div class="paragraph">
<p>The body being sent through was something similar to this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>{
  "Param1": "Param1",
  "Array": ["the", "and", "a"]
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Everything seemed fine to me.</p>
</div>
<div class="paragraph">
<p>My next step was to backtrack and use Postman to check that the issue was the ruby client and not the third party.</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>The body was identical</p>
</li>
<li>
<p>Here the array was correctly sent to the service and correctly stored</p>
</li>
<li>
<p>The headers in the Postman request matched those set in the client</p>
</li>
</ol>
</div>
</div>
</div>
<h1 id="_an_example_of_the_response_i_get" class="sect0">An example of the response I get</h1>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>{
  "ID": 123,
  "Param1": "Param1",
  "Array": []
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Another dead-end. So I decided to try and log the raw request the client was making. One of the tools used in this project is WebMock to mock out out clients and third party calls.</p>
</div>
<div class="paragraph">
<p>From <a href="https://tech.degica.com/en/2015/02/26/recording-http-examples/" class="bare">https://tech.degica.com/en/2015/02/26/recording-http-examples/</a> I added this callback:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>WebMock.after_request do |req, response|
  request = {
    uri: req.uri.to_s,
    method: req.method.to_s.upcase,
    headers: req.headers,
    body: req.body
  }
  puts JSON.pretty_generate(request)
end</code></pre>
</div>
</div>
<div class="paragraph">
<p>This allowed me to record what my client was actually doing.</p>
</div>
<h1 id="_the_raw_request" class="sect0">The raw request</h1>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>{
  :uri=&gt;"", :method=&gt;"PUT",
  :headers=&gt;{"X-Apikey"=&gt;"", "Accept"=&gt;"application/json"},
  :body=&gt;"Param1=Param1&amp;Array[]=the&amp;Array[]=and&amp;Array[]=a"
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Here what was most apparent is that the body seems to have been converted into a paramter string.</p>
</div>
<div class="paragraph">
<p><em>(A really good resource on HTTParty and parameter strings is: <a href="https://stackoverflow.com/questions/21856373/sending-array-variables-using-httparty" class="bare">https://stackoverflow.com/questions/21856373/sending-array-variables-using-httparty</a>)</em></p>
</div>
<div class="paragraph">
<p>I then wrote a quick and dirty HTTParty call - in the method I was debugging - to the same endpoint but with hardcoded values and a body hash, and it worked :)
I then did the exact same call but instead of the hardcoded values I used the same constructors as the previous code (the same header and body methods) and the exact same problem presented itself.</p>
</div>
<div class="paragraph">
<p>In my ensuing investigation I found that</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>"Content-Type" =&gt; "application/json"</code></pre>
</div>
</div>
<div class="paragraph">
<p>was missing from the header parameters in the client. Even though the service does not need this header parameter, HTTParty does need it, otherwise it will default to converting the body into a paramter string when HTTParty is called (<code>.get</code>, <code>.post</code>, <code>.put</code> &#8230;&#8203;) and given a URI and options hash.</p>
</div>
<div class="paragraph">
<p>If HTTParty is called with the options directly added after the URI it works as expected.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>HTTParty.put('https://google.com/', headers: {}, body: {})</code></pre>
</div>
</div>
<div class="paragraph">
<p>But if it is called with an options hash this other behaviour is observed.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>options = {headers: {}, body: {}}
HTTParty.put('https://google.com/', options)</code></pre>
</div>
</div>
<div class="paragraph">
<p><code>format :json</code> after <code>include HTTParty</code> also may help.</p>
</div>
<h1 id="_the_correct_raw_request" class="sect0">The correct raw request</h1>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>{
  :uri=&gt;"", :method=&gt;"PUT",
  :headers=&gt;{"X-Apikey"=&gt;"", "Accept"=&gt;"application/json"},
  :body=&gt;{"Param1": "Param1", "Array": ["the", "and", "a"]}
}</code></pre>
</div>
</div>
<h1 id="_in_conclusion" class="sect0">In Conclusion</h1>
<div class="paragraph">
<p>I came across many people who seemed to be facing the same issue as myself but with no real solutions. The documentation did not seem to help and I found no mention of this behaviour.</p>
</div>
<div class="paragraph">
<p>By chance I was trying different configuration in desperation and came across the solution.</p>
</div>]]></description><link>https://TRex22.github.io/blog/2018/09/22/Series-on-Rails-Part-1.html</link><guid isPermaLink="true">https://TRex22.github.io/blog/2018/09/22/Series-on-Rails-Part-1.html</guid><category><![CDATA[Open_Source]]></category><category><![CDATA[Ruby_On_Rails]]></category><dc:creator><![CDATA[Jason Chalom]]></dc:creator><pubDate>Sat, 22 Sep 2018 00:00:00 GMT</pubDate></item><item><title><![CDATA[Hello Again ~~ :)]]></title><description><![CDATA[<div class="paragraph">
<p>As you can see I am using a new blog renderer. It&#8217;s called <a href="http://hubpress.io/">Hubpress</a> as in Wordpress :). I chose to move away from Skinny Bones because I have been crazy busy and I was not happy with the default configuration. This new tech is a lot more slick to use and even comes with an Admin panel which is powered by the GitHub api.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://TRex22.github.io/blog/images/aroundtheworld.png" alt="aroundtheworld">
</div>
</div>
<div class="paragraph">
<p>I have lots of posts I have been holding off on writing up because of the work involved with the previous iteration of my blog site. Here there is less dev and more learning how this all fits together. I&#8217;ve just seen that there does not seem to be any spell check which is interesting &#8230;&#8203;</p>
</div>
<div class="paragraph">
<p>The interactive web editor is pretty cool and allows the user to save drafts and preview current content which is handy.</p>
</div>
<div class="paragraph">
<p>I am doing my first postgraduate degree at the moment so I am coding, writing and studying far more than ever before. However I want to get my online profile out there for future opportunities.</p>
</div>
<div class="paragraph">
<p>I have a lot of old projects that I would like to write up but put in their own archive area of the blog. I would also like to have a filter function for posts &#8230;&#8203; I see there is one on the admin side. If I can&#8217;t find built in options I&#8217;ll add them as I go.</p>
</div>
<div class="paragraph">
<p>Finally getting this thing off the ground, only three years late! ;)</p>
</div>
<div class="paragraph">
<p>&#8201;&#8212;&#8201;Jason</p>
</div>]]></description><link>https://TRex22.github.io/blog/2017/05/27/Welcome-Back.html</link><guid isPermaLink="true">https://TRex22.github.io/blog/2017/05/27/Welcome-Back.html</guid><category><![CDATA[HubPress]]></category><category><![CDATA[Blog]]></category><category><![CDATA[Open_Source]]></category><category><![CDATA[Opinion]]></category><dc:creator><![CDATA[Jason Chalom]]></dc:creator><pubDate>Sat, 27 May 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Proof of an Optimal Broadcast Algorithm]]></title><description><![CDATA[<div class="imageblock">
<div class="content">
<img src="https://TRex22.github.io/blog/images/ring.png" alt="ring">
</div>
</div>
<div class="paragraph">
<p>Proof of optimality (by induction):</p>
</div>
<div class="paragraph">
<p>RTP: For n-number of nodes the algorithm has O(n) maximum communication steps.<br></p>
</div>
<div class="paragraph">
<p>For n=1: There are 0 communication steps.<br>
For n=2: There is 1 communication step.<br>
For n=k: There are k communication steps.<br>
For n=k+1: There is 1 communication step.</p>
</div>
<div class="paragraph">
<p>∴ The number of communication steps can never exceed the number of nodes in this configuration, i.e. This is the optimal broadcast algorithm for this network design. The smallest number of communication steps is 1 (between more than one node) and the largest possible amount of steps is k.</p>
</div>
<div class="paragraph">
<p>This is a simple example of an algorithmic proof of optimality. For parallel systems and more complex network structure the proofs can become more involved.</p>
</div>]]></description><link>https://TRex22.github.io/blog/2017/05/27/Proof-of-an-Optimal-Broadcast-Algorithm.html</link><guid isPermaLink="true">https://TRex22.github.io/blog/2017/05/27/Proof-of-an-Optimal-Broadcast-Algorithm.html</guid><category><![CDATA[Computer Science]]></category><category><![CDATA[Algorithms]]></category><dc:creator><![CDATA[Jason Chalom]]></dc:creator><pubDate>Sat, 27 May 2017 00:00:00 GMT</pubDate></item></channel></rss>